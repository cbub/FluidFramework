# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.

# test-real-service pipeline

name: $(Build.BuildId)

parameters:
- name: poolBuild
  type: object
  default: Lite

trigger: none
pr: none

resources:
  pipelines:
  - pipeline: client   # Name of the pipeline resource
    source: Build - client packages
    trigger:
      branches:
      - releases/*
      - main

variables:
  # We use 'chalk' to colorize output, which auto-detects color support in the
  # running terminal.  The log output shown in Azure DevOps job runs only has
  # basic ANSI color support though, so force that in the pipeline
  - name: FORCE_COLOR
    value: 1
  - template: templates/include-vars.yml
    parameters:
      buildNumberInPatch: true
  - name: diDir
    value: '$(Build.SourcesDirectory)/tools/pipelines/dependency-injection'
  - name: e2eDir
    value: '${{ variables.diDir }}/node_modules/@fluidframework/test-end-to-end-tests'
  - name: serviceLoadTestDir
    value: '${{ variables.diDir }}/node_modules/@fluidframework/test-service-load-tests'

jobs:
  - job: run
    displayName: Run Tests
    pool: ${{ parameters.poolBuild }}
    timeoutInMinutes: 240
    steps:
    # Setup
    - checkout: self
      clean: true
      lfs: false
      submodules: false

    # Print parameters/Vars
    - task: Bash@3
      displayName: Print Parameters and Variables
      inputs:
        targetType: 'inline'
        script: |
          # Show all task group conditions

          echo "
          Pipeline Parameters:
            poolBuild=${{ parameters.poolBuild }}

          Pipeline Variables:
            diDir=${{ variables.diDir }}
          "

    # Install
    - task: UseNode@1
      displayName: Use Node 12.x
      inputs:
        version: 12.x

    # Download artifact
    - download: client
      artifact: pack
      patterns: "**/fluidframework-test-end-to-end-tests-*.tgz"

    # [DI] Auth to internal feed
    - task: npmAuthenticate@0
      displayName: '[DI] npm authenticate (internal feed)'
      inputs:
        workingFile: ${{ variables.diDir }}/.npmrc

    # [DI] Auth to Office feed
    - task: npmAuthenticate@0
      displayName: '[DI] npm authenticate (office feed)'
      inputs:
        workingFile: ${{ variables.diDir }}/.npmrc
        customEndpoint: 'Office Packages - Readonly'

    # [DI] Prep dependency-injection package for install
    - task: Bash@3
      displayName: '[DI] Prepare DI package'
      inputs:
        targetType: 'inline'
        script: 'mv _package.json package.json'
        workingDirectory: ${{ variables.diDir }}

    # [DI] Install dependency-injection package
    - task: Npm@1
      displayName: '[DI] npm install'
      inputs:
        command: 'custom'
        workingDir: ${{ variables.diDir }}
        customCommand: 'install'
        customRegistry: 'useNpmrc'
    - task: Bash@3
      name: GetPackageFileName
      displayName: Get package file name
      inputs:
        targetType: 'inline'
        script: |
          echo "##vso[task.setvariable variable=e2etgz;isOutput=true]`ls $(PIPELINE.WORKSPACE)/client/pack/fluidframework-test-end-to-end-tests-*.tgz`"

    # Install end to end test
    - task: Npm@1
      displayName: 'npm install e2e'
      inputs:
        command: 'custom'
        workingDir: ${{ variables.diDir }}
        customCommand: 'install $(GetPackageFileName.e2etgz)'
        customRegistry: 'useNpmrc'

    # end-to-end tests routerlicious
    - task: Npm@1
      displayName: '[end-to-end tests] npm run test:realsvc:routerlicious:report'
      continueOnError: true
      timeoutInMinutes: 60
      env:
        fluid__webpack__bearerSecret: $(fluid-webpack-bearerSecret)
        fluid__webpack__fluidHost: $(fluid-webpack-fluidHost)
        fluid__webpack__tenantId: $(fluid-webpack-tenantId)
        fluid__webpack__tenantSecret: $(fluid-webpack-tenantSecret)
        FLUID_TEST_LOGGER_PKG_PATH: ${{ variables.diDir }}/node_modules/@ff-internal/aria-logger # Contains getTestLogger impl to inject
      inputs:
        command: 'custom'
        workingDir: ${{ variables.e2eDir }}
        customCommand: 'run test:realsvc:routerlicious:report'

    # end-to-end tests odsp
    # - task: Npm@1
    #   displayName: '[end-to-end tests] npm run test:realsvc:odsp:report'
    #   continueOnError: true
    #   timeoutInMinutes: 60
    #   env:
    #     login__microsoft__clientId: $(login-microsoft-clientId)
    #     login__microsoft__secret: $(login-microsoft-secret)
    #     login__odsp__test__accounts: $(login-odsp-test-accounts)
    #     FLUID_TEST_LOGGER_PKG_PATH: ${{ variables.diDir }}/node_modules/@ff-internal/aria-logger # Contains getTestLogger impl to inject
    #   inputs:
    #     command: 'custom'
    #     workingDir: ${{ variables.e2eDir }}
    #     customCommand: 'run test:realsvc:odsp:report'

    # Run Stress Tests
    # - task: Npm@1
    #   displayName: '[stress tests] npm run start'
    #   continueOnError: true
    #   timeoutInMinutes: 60
    #   env:
    #     login__microsoft__clientId: $(login-microsoft-clientId)
    #     login__microsoft__secret: $(login-microsoft-secret)
    #     login__odsp__test__accounts: $(login-odsp-test-accounts)
    #     FLUID_TEST_LOGGER_PKG_PATH: ${{ variables.diDir }}/node_modules/@ff-internal/aria-logger # Contains getTestLogger impl to inject
    #   inputs:
    #     command: 'custom'
    #     workingDir: ${{ variables.serviceLoadTestDir }}
    #     customCommand: 'run start'

    # Run Copy Test Results
    - task: Npm@1
      displayName: npm run test:copyresults'
      inputs:
        command: 'custom'
        workingDir: ${{ variables.diDir }}
        customCommand: 'run test:copyresults'

    # Upload results
    - task: PublishTestResults@2
      displayName: Publish Test Results
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/*junit-report.xml'
        searchFolder: ${{ variables.diDir }}/nyc
        mergeTestResults: false
      condition: succeededOrFailed()
